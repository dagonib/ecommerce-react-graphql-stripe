[{"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\index.js":"1","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\reportWebVitals.js":"2","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\App.js":"3","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Signin.js":"4","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Signup.js":"5","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Home.js":"6","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Checkout.js":"7","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Navegation.js":"8","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Loader.js":"9","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Brews.js":"10","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\utils\\index.js":"11","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\ToastMessage.js":"12"},{"size":514,"mtime":1608122691146,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":962,"mtime":1608638393284,"results":"16","hashOfConfig":"14"},{"size":102,"mtime":1608122245738,"results":"17","hashOfConfig":"14"},{"size":4065,"mtime":1608976461299,"results":"18","hashOfConfig":"14"},{"size":3915,"mtime":1608801519123,"results":"19","hashOfConfig":"14"},{"size":108,"mtime":1608122307653,"results":"20","hashOfConfig":"14"},{"size":466,"mtime":1608194400771,"results":"21","hashOfConfig":"14"},{"size":235,"mtime":1608628898082,"results":"22","hashOfConfig":"14"},{"size":5451,"mtime":1608829508738,"results":"23","hashOfConfig":"14"},{"size":552,"mtime":1608829394997,"results":"24","hashOfConfig":"14"},{"size":207,"mtime":1608973166204,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1vrfo3p",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\index.js",[],["52","53"],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\reportWebVitals.js",[],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\App.js",[],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Signin.js",[],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Signup.js",["54"],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Home.js",[],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Checkout.js",[],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Navegation.js",[],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Loader.js",[],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\Brews.js",["55","56"],"import React, { useEffect, useState } from 'react'\r\nimport {Row, Col, Container, Card, CardGroup, Button } from 'react-bootstrap'\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport Strapi from 'strapi-sdk-javascript/build/main'\r\nimport { calculatePrice, getCart, setCart } from '../utils/index'\r\n\r\nconst apiurl = process.env.API_URL || 'http://localhost:1337';\r\nconst strapi = new Strapi(apiurl);\r\n\r\nconst Brews = (props) => {\r\n\r\n    const [brews, setBrews] = useState([])\r\n    const [brand, setBrand] = useState('')\r\n    const [cartItems, setCartItems] = useState([])\r\n\r\n    useEffect (() => {\r\n        //console.log(props.match.params.brandId)\r\n        try {\r\n            async function fetchData() {\r\n                let response = await strapi.request('POST', '/graphql', {\r\n                    data: {\r\n                        query: `query {\r\n                            brand(id: \"${props.match.params.brandId}\") {\r\n                                _id\r\n                                name\r\n                                brews {\r\n                                    _id\r\n                                    name\r\n                                    description\r\n                                    image {\r\n                                        url\r\n                                    }\r\n                                    price\r\n                                }\r\n                            }\r\n                        }`\r\n                    }\r\n                })\r\n                setBrews(response.data.brand.brews)\r\n                setBrand(response.data.brand.name)\r\n                setCartItems(getCart())\r\n            }\r\n            fetchData();\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }, [])\r\n\r\n    const addToCart = (brew) => {\r\n        const alreadyInCart = cartItems.findIndex(\r\n            item => item._id === brew._id\r\n        )\r\n\r\n        if(alreadyInCart === -1) {\r\n            const updatedItems = cartItems.concat({\r\n                ...brew,\r\n                quantity: 1\r\n            })\r\n            setCartItems(updatedItems)\r\n            setCart(updatedItems)\r\n        } else {\r\n            const updatedItems = [...cartItems]\r\n            updatedItems[alreadyInCart].quantity += 1\r\n            setCartItems(updatedItems)\r\n            setCart(updatedItems)\r\n        }\r\n    }\r\n\r\n    const deleteItemFromCart = (itemToDeleteId) => {\r\n        const filteredItems = cartItems.filter(\r\n            item => item._id !== itemToDeleteId\r\n        )\r\n        setCartItems(filteredItems)\r\n        setCart(filteredItems)\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            {/**Brews Cards */}\r\n            <Row className=\"d-flex justify-content-around\">\r\n                <Col xs={{ order: 2, span: 12 }} md={{ order: 1, span: 8}}>\r\n                    <CardGroup>\r\n                        {brews.map(brew => (\r\n                        <Card\r\n                                key={brew._id}\r\n                                style={{ width: '15rem '}}\r\n                        >\r\n                            <Card.Img \r\n                                    alt=\"Brew\"\r\n                                    src={`${apiurl}${brew.image[0].url}`}\r\n                                    variant=\"top\"\r\n                            />\r\n                            <Card.Body>\r\n                                    <Card.Title>{brew.name}</Card.Title>\r\n                                    <Card.Text>{brew.description}</Card.Text>\r\n                                    <Card.Text>{brew.price}</Card.Text>\r\n                                    <Button \r\n                                        variant=\"primary\"\r\n                                        onClick={() => addToCart(brew)}\r\n                                    >Add to Cart\r\n                                    </Button>\r\n                            </Card.Body>\r\n                        </Card> \r\n                        ))}\r\n                    </CardGroup>\r\n                </Col>\r\n\r\n                {/**User Cart */}\r\n                <Col xs={{ order: 1, span: 12 }} md={{ order: 2, span: 4}}>\r\n                    <Card>\r\n                        <Card.Header>Your Cart</Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Text>{cartItems.length} items selected</Card.Text>\r\n                            <Card>\r\n                                {cartItems.map(item => (\r\n                                    \r\n                                    <Card.Text>\r\n                                        {item.name} x {item.quantity} - ${(item.quantity * item.price).toFixed(2)}\r\n                                        <BsFillTrashFill \r\n                                            onClick={() => deleteItemFromCart(item._id)}\r\n                                        />\r\n                                    </Card.Text>\r\n                                ))}\r\n                            </Card>\r\n                            {cartItems.length === 0 && (\r\n                                <Card.Text>Please select some items</Card.Text>\r\n                            )}\r\n                            <Card.Text>Total: {calculatePrice(cartItems)}€</Card.Text>\r\n                            <Card.Link href=\"/checkout\">Checkout</Card.Link>\r\n                        </Card.Body>\r\n\r\n                    </Card>\r\n                </Col>\r\n            </Row>           \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Brews;","C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\utils\\index.js",[],"C:\\HardDrive\\React\\GraphQL\\ecommerce-react-graphql-stripe\\client\\src\\components\\ToastMessage.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":16,"column":12,"nodeType":"63","messageId":"64","endLine":16,"endColumn":19},{"ruleId":"61","severity":1,"message":"65","line":13,"column":12,"nodeType":"63","messageId":"64","endLine":13,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":47,"column":8,"nodeType":"68","endLine":47,"endColumn":10,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'brand' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.brandId'. Either include it or remove the dependency array.","ArrayExpression",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [props.match.params.brandId]",{"range":"75","text":"76"},[1747,1749],"[props.match.params.brandId]"]